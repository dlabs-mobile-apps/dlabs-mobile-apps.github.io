"use strict";(self.webpackChunkdlabs_mobile_apps_github_io=self.webpackChunkdlabs_mobile_apps_github_io||[]).push([[2326],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,g=u["".concat(l,".").concat(m)]||u[m]||h[m]||o;return a?n.createElement(g,i(i({ref:t},p),{},{components:a})):n.createElement(g,i({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1828:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={sidebar_position:3,tags:["repository"],description:"Git Bash"},i="Git Bash",s={unversionedId:"repository/git-bash",id:"repository/git-bash",title:"Git Bash",description:"Git Bash",source:"@site/docs/repository/git-bash.md",sourceDirName:"repository",slug:"/repository/git-bash",permalink:"/docs/repository/git-bash",draft:!1,tags:[{label:"repository",permalink:"/docs/tags/repository"}],version:"current",lastUpdatedAt:1697009754,formattedLastUpdatedAt:"Oct 11, 2023",sidebarPosition:3,frontMatter:{sidebar_position:3,tags:["repository"],description:"Git Bash"},sidebar:"tutorialSidebar",previous:{title:"Git Flow",permalink:"/docs/repository/git-flow"},next:{title:"State Management",permalink:"/docs/design-pattern/state-management"}},l={},c=[{value:"git log",id:"git-log",level:2},{value:"git rebase",id:"git-rebase",level:2},{value:"rebase squash",id:"rebase-squash",level:3},{value:"rebase drop",id:"rebase-drop",level:3},{value:"rebase with conflict",id:"rebase-with-conflict",level:3},{value:"git cherry-pick",id:"git-cherry-pick",level:2},{value:"git stash",id:"git-stash",level:2}],p={toc:c};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"git-bash"},"Git Bash"),(0,r.kt)("p",null,"Git command line :"),(0,r.kt)("h2",{id:"git-log"},"git log"),(0,r.kt)("p",null,"To checking your log commit."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git log -n [number] \n")),(0,r.kt)("p",null,"or use --oneline for simple logs."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git log -n [number] --oneline\n")),(0,r.kt)("p",null,"number is how much you need to see commits line"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"to checking 10 commits log.\n\ngit log -n 10 --oneline\n")),(0,r.kt)("h2",{id:"git-rebase"},"git rebase"),(0,r.kt)("p",null,"Reapply commits on top of another base tip."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git rebase [branch base]\n")),(0,r.kt)("p",null,"How to use rebase squash or drop on your branch:"),(0,r.kt)("p",null,"Start it with the last commit you want to retain as-is:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git rebase -i HEAD~3 <rebase three commit from head>\n")),(0,r.kt)("p",null,"An editor will be fired up with all the commits in your current branch (ignoring merge commits), which come after the given commit. You can reorder the commits in this list to your heart\u2019s content, and you can remove them. The list looks more or less like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pick deadbee The oneline of this commit\npick fa1afe1 The oneline of the next commit\npick rasade4 The oneline of the next two commit\n")),(0,r.kt)("h3",{id:"rebase-squash"},"rebase squash"),(0,r.kt)("p",null,"Squashing multiple commits into one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pick deadbee The oneline of this commit\ns fa1afe1 The oneline of the next commit\ns rasade4 The oneline of the next two commit\n")),(0,r.kt)("h3",{id:"rebase-drop"},"rebase drop"),(0,r.kt)("p",null,'To drop a commit, replace the command "pick" with "drop", or just delete the matching line.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"pick deadbee The oneline of this commit\nd fa1afe1 The oneline of the next commit [if this line commit that will be remove]\npick rasade4 The oneline of the next two commit\n")),(0,r.kt)("h3",{id:"rebase-with-conflict"},"rebase with conflict"),(0,r.kt)("p",null,"In case of conflict, git rebase will stop at the first problematic commit and leave conflict markers in the tree. You can use git diff to locate the markers (<<<<<<) and make edits to resolve the conflict. For each file you edit, you need to tell Git that the conflict has been resolved, typically this would be done with :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git add [filename]\n")),(0,r.kt)("p",null,"After resolving the conflict manually and updating the index with the desired resolution, you can continue the rebasing process with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git rebase --continue\n")),(0,r.kt)("p",null,"Alternatively, you can undo the git rebase with"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git rebase --abort\n")),(0,r.kt)("p",null,"After done your rebase you need to force push your branch:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git push -f origin [your branch]\n")),(0,r.kt)("h2",{id:"git-cherry-pick"},"git cherry-pick"),(0,r.kt)("p",null,"Cherry picking in Git means to choose a commit from one branch and apply it onto another."),(0,r.kt)("p",null,"This is in contrast with other ways such as merge and rebase which normally apply many commits onto another branch."),(0,r.kt)("p",null,"Make sure you are on the branch you want to apply the commit to."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git switch [target branch]\n")),(0,r.kt)("p",null,"Execute the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git cherry-pick [commit-hash]\n\nexc:\ngit cherry-pick deadbee\n\nmultiple commit hash:\ngit cherry-pick deadbee fa1afe1 (don't forget to add space between commit hash)\n\n")),(0,r.kt)("h2",{id:"git-stash"},"git stash"),(0,r.kt)("p",null,"Use git stash when you want to record the current state of the working directory and the index, but want to go back to a clean working directory."),(0,r.kt)("p",null,"How to stash changes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git stash\n")),(0,r.kt)("p",null,"to checking how many stash you had:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git stash list\n")),(0,r.kt)("p",null,"result would be like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"stash@{0}: WIP on submit: 6ebd0e2... Update git-stash documentation\nstash@{1}: On master: 9cc0589... Add git-stash\n")),(0,r.kt)("p",null,"to apply stash but keep stash log:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git stash apply stash@{0}\n")),(0,r.kt)("p",null,"to apply stash then remove from stash log:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git stash pop stash@{n}\n")),(0,r.kt)("p",null,"if you only have 1 stash you can use "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git stash pop\n")))}h.isMDXComponent=!0}}]);